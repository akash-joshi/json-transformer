{"version":3,"sources":["index.jsx","LinkToRepo.js","examples.js"],"names":["App","_Object$keys","_useState","useState","_useState2","Object","C_code_oss_json_transformer_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","theme","setTheme","_useState3","_useState4","language","setLanguage","_useLocalStorage","useLocalStorage","_useLocalStorage2","inputData","setInputData","_useLocalStorage3","_useLocalStorage4","codeData","setCodeData","_useState5","_useState6","outputData","setOutputData","toggleTheme","toggleLanguage","handleInputChange","event","value","target","console","log","handleEditorChange","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","style","display","gridTemplateColumns","height","onChange","_monaco_editor_react__WEBPACK_IMPORTED_MODULE_5__","loading","react_spinners__WEBPACK_IMPORTED_MODULE_6__","defaultValue","onClick","output","eval","concat","error","keys","length","react_json_view__WEBPACK_IMPORTED_MODULE_3___default","src","disabled","rootElement","document","getElementById","ReactDOM","render","__webpack_require__","rTabs","str","trim","replace"],"mappings":"w0CAeA,SAASA,MAAM,IAAAC,aACbC,UAA0BC,oDAAS,SAAnCC,WAAAC,OAAAC,kJAAA,EAAAD,CAAAH,UAAA,GAAOK,MAAPH,WAAA,GAAcI,SAAdJ,WAAA,GACAK,WAAgCN,oDAAS,cAAzCO,WAAAL,OAAAC,kJAAA,EAAAD,CAAAI,WAAA,GAAOE,SAAPD,WAAA,GAAiBE,YAAjBF,WAAA,GAEAG,iBAAkCC,iDAAgB,QAAS,IAA3DC,kBAAAV,OAAAC,kJAAA,EAAAD,CAAAQ,iBAAA,GAAOG,UAAPD,kBAAA,GAAkBE,aAAlBF,kBAAA,GACAG,kBAAgCJ,iDAAgB,OAAQ,IAAxDK,kBAAAd,OAAAC,kJAAA,EAAAD,CAAAa,kBAAA,GAAOE,SAAPD,kBAAA,GAAiBE,YAAjBF,kBAAA,GACAG,WAAoCnB,oDAAS,SAAU,IAAvDoB,WAAAlB,OAAAC,kJAAA,EAAAD,CAAAiB,WAAA,GAAOE,WAAPD,WAAA,GAAmBE,cAAnBF,WAAA,GAEA,SAASG,cACPlB,SAAmB,UAAVD,MAAoB,UAAY,SAG3C,SAASoB,iBACPf,YAAyB,eAAbD,SAA4B,SAAW,cAGrD,SAASiB,kBAAkBC,GACzB,IAAQC,EAAUD,EAAME,OAAhBD,MACRE,QAAQC,IAAI,mCAAoCH,GAChDb,aAAaa,GAGf,SAASI,mBAAmBJ,EAAOD,GACjCG,QAAQC,IAAI,kCAAmCH,GAC/CT,YAAYS,GAGd,OACEK,2CAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,QAAS,OACTC,oBAAqB,cACrBC,OAAQ,UAGVN,2CAAAC,EAAAC,cAAA,YAAUP,MAAOd,UAAW0B,SAAUd,oBAEtCO,2CAAAC,EAAAC,cAACM,kDAAA,EAAD,CACEF,OAAO,oBACPlC,MAAOA,MACPI,SAAUA,SACViC,QAAST,2CAAAC,EAAAC,cAACQ,4CAAA,YAAD,MAETC,aAAc1B,SACdsB,SAAUR,qBAGZC,2CAAAC,EAAAC,cAAA,WACEF,2CAAAC,EAAAC,cAAA,UACEU,QAAS,SAAAA,UACP,IACE,IAAMC,OAASC,KAAI,qBAAAC,OAAsBlC,UAAtB,iBAAAkC,OACrB9B,SADqB,iBAGnBK,cAAcuB,QACd,MAAOG,OACP1B,cAAc0B,UARpB,YAcC3B,aAAU,QAAAvB,aAAII,OAAO+C,KAAK5B,mBAAhB,IAAAvB,kBAAA,EAAIA,aAAyBoD,QACtClB,2CAAAC,EAAAC,cAACiB,qDAAAlB,EAAD,CAAWmB,IAAK/B,aAEhBW,2CAAAC,EAAAC,cAAA,YAAUmB,UAAQ,EAAC1B,MAAON,eAOpC,IAAMiC,YAAcC,SAASC,eAAe,QAC5CC,iDAASC,OAAO1B,2CAAAC,EAAAC,cAACrC,IAAD,MAASyD,8CCxFzBK,EAAA,oCCCA,IAAMC,EAAQ,SAACC,GAAD,OAASA,EAAIC,OAAOC,QAAQ,UAAW,KAGvCH,EAAK,qlDAoDTA,EAAK","file":"static/js/main.fe35d671.chunk.js","sourcesContent":["// @monaco-editor/react is Monaco editor wrapper for easy/one-line integration with React\n// applications without need of webpack (or other module bundler)\n// configuration files.\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactJson from \"react-json-view\";\nimport { useLocalStorage } from \"react-use\";\n\nimport Editor from \"@monaco-editor/react\";\nimport { ClockLoader as Loader } from \"react-spinners\";\n\nimport LinkToRepo from \"./LinkToRepo\";\nimport examples from \"./examples\";\n\nfunction App() {\n  const [theme, setTheme] = useState(\"light\");\n  const [language, setLanguage] = useState(\"javascript\");\n\n  const [inputData, setInputData] = useLocalStorage(\"input\", \"\");\n  const [codeData, setCodeData] = useLocalStorage(\"code\", \"\");\n  const [outputData, setOutputData] = useState(\"output\", \"\");\n\n  function toggleTheme() {\n    setTheme(theme === \"light\" ? \"vs-dark\" : \"light\");\n  }\n\n  function toggleLanguage() {\n    setLanguage(language === \"javascript\" ? \"python\" : \"javascript\");\n  }\n\n  function handleInputChange(event) {\n    const { value } = event.target;\n    console.log(\"here is the current input value:\", value);\n    setInputData(value);\n  }\n\n  function handleEditorChange(value, event) {\n    console.log(\"here is the current code value:\", value);\n    setCodeData(value);\n  }\n\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"1fr 1fr 1fr\",\n        height: \"100vh\",\n      }}\n    >\n      <textarea value={inputData} onChange={handleInputChange} />\n\n      <Editor\n        height=\"calc(100% - 19px)\" // By default, it fully fits with its parent\n        theme={theme}\n        language={language}\n        loading={<Loader />}\n        \n        defaultValue={codeData}\n        onChange={handleEditorChange}\n      />\n\n      <div>\n        <button\n          onClick={() => {\n            try {\n              const output = eval(`const inputData = ${inputData};\n          ${codeData}\n          `);\n              setOutputData(output);\n            } catch (error) {\n              setOutputData(error);\n            }\n          }}\n        >\n          Generate\n        </button>\n        {outputData && Object.keys(outputData)?.length ? (\n          <ReactJson src={outputData} />\n        ) : (\n          <textarea disabled value={outputData} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n","import React from \"react\";\n\nconst styles = {\n  link: {\n    textDecoration: \"none\"\n  },\n  wrapper: {\n    marginRight: 10,\n    display: \"inline\",\n    border: \"1px solid black\"\n  }\n};\n\nconst LinkToRepo = _ => (\n  <button style={styles.wrapper}>\n    <a\n      href=\"https://github.com/SurenAt93/monaco-react\"\n      rel=\"noopener noreferrer\"\n      target=\"_blank\"\n      style={styles.link}\n    >\n      Go to GitHub - @monaco-editor/react\n    </a>\n  </button>\n);\n\nexport default LinkToRepo;\n","/* eslint-disable */\nconst rTabs = (str) => str.trim().replace(/^ {4}/gm, \"\");\n\nconst examples = {\n  javascript: rTabs(`\n    // @monaco-editor/react is Monaco editor wrapper for painless integration with React\n    // applications without need of webpack (or other module bundler)\n    // configuration files.\n    \n    import React, { useState } from \"react\";\n    import ReactDOM from \"react-dom\";\n    \n    import Editor from \"@monaco-editor/react\";\n    import examples from \"./examples\";\n    \n    function App() {\n      const [theme, setTheme] = useState(\"light\");\n      const [language, setLanguage] = useState(\"javascript\");\n      const [isEditorReady, setIsEditorReady] = useState(false);\n    \n      function handleEditorDidMount() {\n        setIsEditorReady(true);\n      }\n    \n      function toggleTheme() {\n        setTheme(theme === \"light\" ? \"vs-dark\" : \"light\");\n      }\n    \n      function toggleLanguage() {\n        setLanguage(language === \"javascript\" ? \"python\" : \"javascript\");\n      }\n    \n      return (\n        <>\n          <button onClick={toggleTheme} disabled={!isEditorReady}>\n            Toggle theme\n          </button>\n          <button onClick={toggleLanguage} disabled={!isEditorReady}>\n            Toggle language\n          </button>\n    \n          <Editor\n            height=\"90vh\" // By default, it fully fits with its parent\n            theme={theme}\n            language={language}\n            value={examples[language]}\n            editorDidMount={handleEditorDidMount}\n            loading={\"Loading...\"}\n          />\n        </>\n      );\n    }\n    \n    const rootElement = document.getElementById(\"root\");\n    ReactDOM.render(<App />, rootElement);  \n  `),\n  python: rTabs(`\n    # Python program to check if the number provided by the user is an Armstrong number or not\n    # take input from the user\n    num = int(input(\"Enter a number: \"))\n    # initialize sum\n    sum = 0\n    # find the sum of the cube of each digit\n    temp = num\n    while temp > 0:\n       digit = temp % 10\n       sum += digit ** 3\n       temp //= 10\n    # display the result\n    if num == sum:\n       print(num,\"is an Armstrong number\")\n    else:\n       print(num,\"is not an Armstrong number\")\n  `)\n};\n\nexport default examples;\n"],"sourceRoot":""}